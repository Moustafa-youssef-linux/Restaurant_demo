# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Google Kubernetes Engine when a commit is pushed to the "test" branch
#
# Overview:
#
# 1. GCP is configured to authenticate and authorize Github using workload cloud federation instead of using serviceaccount long-lived key
# 2. Github provides the repo name as attribute to google workload cloud federation to retrieve the token
# 3. configure Docker to save token of google artifact registry to be able to use it
# 4. Build docker image
# 5. Push it to artifact registry under restaurant-demo repo
# 6- an optional step for authenticating to K8s that was being used for testing the deployment before integrating argocd
# 7- modifying image tag in values to let argocd trigger deployment
#
#
# Further configurations:
#   adding github secrets
#   jobs run with conditions


name: Build and Deploy to Cloud Run

on:
  push:
    branches: [ "test" ]

env:

  ############################################### GKE ###################################################
  PROJECT_ID: '${{ secrets.GKE_PROJECT }}'
  GAR_LOCATION: us-central1
  GKE_CLUSTER: isolution-cluster
  GKE_ZONE: us-central1-c
  DEPLOYMENT_NAME: test-app
  REPOSITORY: restaurant-demo
  IMAGE: app


jobs:
  docker:

    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && !contains( github.event.head_commit.message, 'Done  by Github Action') }}
    environment: production

    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # NOTE: Alternative option - authentication via credentials json
      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}''

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'


      # Build the Docker image
      - name: Build
        run: |-
          
          export SHA7=${GITHUB_SHA::7}
          export branch_name="$(cut -d'/' -f3 <<<'${{ github.ref }}')"
          
          docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"  \
           -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest" \
            -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$branch_name" .
          
      # Push the Docker image to Google Artifact Registry
      - name: Publish
        run: |-
          export SHA7=${GITHUB_SHA::7}
          export branch_name="$(cut -d'/' -f3 <<<'${{ github.ref }}')"
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
          # docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest"
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$branch_name"
          
#      - name: update image tag in helm values file
#        id: update-image
#        run: |-
#          sed -i "s/placeholder-for-image-tag/${GITHUB_SHA}/g" infrastructure/restaurant-app/values.yaml
#          cat infrastructure/restaurant-app/values.yaml

#      - name: running get cred manually
#        run: |-
#
#          gcloud container attached clusters get-credentials isolution-cluster --location=us-central1-c

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}




  modifygit:
    needs: docker
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && !contains( github.event.head_commit.message, 'Done  by Github Action') }}
    steps:
      - uses: actions/checkout@v3
        name: changing the deployment of git repo
        with:
          repository: 'moustafa-youssef-linux/Restaurant_demo'
          token: ${{ secrets.GIT_PASSWORD }}
      - name: modify the image
        run: |
          git config user.email moustafayoussef759@gmail.com
          git config user.name  Moustafa-youssef-linux 
          old_img_tag=$(cat infrastructure/restaurant-app/values.yaml | grep -i "tag\:" | awk '{print $2}' | tr -d '"')
          sed -i "s/$old_img_tag/${GITHUB_SHA}/g" infrastructure/restaurant-app/values.yaml
          cat infrastructure/restaurant-app/values.yaml
          git add infrastructure/restaurant-app/values.yaml
          git commit -m 'Done  by Github Action'
          git push origin test
        env:
          GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
          GIT_PASSWORD: ${{ secrets.GIT_PASSWORD }}
#      # Set up kustomize
#      - name: Set up Kustomize
#        run: |-
#          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
#          chmod u+x ./kustomize
#      # Deploy the Docker image to the GKE cluster
#      - name: Deploy
#        run: |-
#          # replacing the image name in the k8s template
#          #./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
#          #./kustomize build . | kubectl apply -f -
#          #kubectl rollout status deployment/$DEPLOYMENT_NAME
#          #kubectl get services -o wide
#          kubectl rollout restart deployment/$DEPLOYMENT_NAME -n restaurant-demo
      # END - Docker auth and build

